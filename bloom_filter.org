* What is a Bloom Filter?

From wikipedia:

A **Bloom Filter** is a space-efficient probabilistic data structure that is used to test whether an element is a member of a set.

* Build the Project

First we make a new project

#+BEGIN_SRC sh
cargo new bloom_filter
#+END_SRC

and add bit vectors as a dependency:

#+BEGIN_SRC toml :tangle bloom_filter/Cargo.toml
[package]
name = "bloom_filter"
version = "0.1.0"
authors = ["dr-neptune <mrose4@worcester.edu>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
bit-vec = "0.6"
fake = "2.4"
#+END_SRC

then rebuild

#+BEGIN_SRC sh :dir bloom_filter
cargo build
#+END_SRC

* Declare Structs

Next we declare a new struct to encapsulate required fields:
- $k$ optimal number of hash functions
- $m$ optimal size of the bit array
- $v$ the bit array
- hash functions
- a marker to tell the rust compiler that our struct owns a T

#+name: preamble-struct
#+BEGIN_SRC rust :crates '((bit-vec . "0.6")(fake . "2.4"))
extern crate bit_vec;
extern crate fake;

// these are used for building the bloom filter
use bit_vec::BitVec;
use std::collections::hash_map::{DefaultHasher, RandomState};
use std::hash::{BuildHasher, Hash, Hasher};
use std::marker::PhantomData;

// these are used to generate fake data
use fake::Fake;
// using `faker` module with locales
use fake::faker::name::raw::*;
use fake::locales::*;

pub struct StandardBloomFilter<T: ?Sized> {
    bitmap: BitVec,
    optimal_m: usize,
    optimal_k: u32,
    hashers: [DefaultHasher; 2],
    _marker: PhantomData<T>,
}

#+END_SRC

* Add Constructor

The Bloom filter has two operations: Insert and Query. We will implement those two operations along with a constructor-like new method:

#+name: new-constructor
#+BEGIN_SRC rust
// new calculates the size of the bitmap v and optimal_k k and then instantiates a StandardBloomFilter
pub fn new(items_count: usize, fp_rate: f64) -> Self {
    // get optimals and instantiate hash functions
    let optimal_m = Self::bitmap_size(items_count, fp_rate);
    let optimal_k = Self::optimal_k(fp_rate);
    let hashers = [
	RandomState::new().build_hasher(),
	RandomState::new().build_hasher(),
    ];
    // instantiate the bloom filter
    StandardBloomFilter {
	bitmap: BitVec::from_elem(optimal_m as usize, false),
	optimal_m,
	optimal_k,
	hashers,
	_marker: PhantomData,
    }
}
#+END_SRC

#+name: bitmap-size
#+BEGIN_SRC rust
// Calculate the size of bitmap
// The size of bitmap depends on the target false positive probability and # of items in the set
fn bitmap_size(items_count: usize, fp_rate: f64) -> usize {
    let ln2_2 = core::f64::consts::LN_2 * core::f64::consts::LN_2;
    ((-1.0f64 * items_count as f64 * fp_rate.ln()) / ln2_2).ceil() as usize
}
#+END_SRC

#+name: num-hash-fns
#+BEGIN_SRC rust
// calculate the number of hash functions
// This only depends on the target false positive probability
fn optimal_k(fp_rate: f64) -> u32 {
    ((-1.0f64 * fp_rate.ln()) / core::f64::consts::LN_2).ceil() as u32
}
#+END_SRC

We can run these calculations independently:

* Double Check Calculations

#+BEGIN_SRC rust :results verbatim
fn main() {
    let items_count = 1_000_000;
    let bitmap_size = bitmap_size(items_count, 0.01);
    let optimal_k = optimal_k(0.01);

    println!("bitmap_size: {}", bitmap_size);
    println!("optimal_k: {}", optimal_k);
}

fn bitmap_size(items_count: usize, fp_rate: f64) -> usize {
    let ln2_2 = core::f64::consts::LN_2 * core::f64::consts::LN_2;
    ((-1.0f64 * items_count as f64 * fp_rate.ln()) / ln2_2).ceil() as usize
}

fn optimal_k(fp_rate: f64) -> u32 {
    ((-1.0f64 * fp_rate.ln()) / core::f64::consts::LN_2).ceil() as u32
}
#+END_SRC

We got:

: bitmap_size: 9585059
: optimal_k: 7

This means that a Bloom Filter that represents a set of 1 million items with a false positive rate of 0.01 requires only 9585059 bits (1.14 mb) and 7 hash functions.

* Add Operations (Methods)

Now we can implement the insert and contains methods

#+name: insert-method
#+BEGIN_SRC rust
pub fn insert(&mut self, item: &T)
where
    T: Hash,
{
    let (h1, h2) = self.hash_kernel(item);

    for k_i in 0..self.optimal_k {
	let index = self.get_index(h1, h2, k_i as u64);
	self.bitmap.set(index, true);
    }
}

// insert relies on these
// hash_kernel is where the actual hashing happens.
// this returns the hash values of h_1(x), h_2(x)
fn hash_kernel(&self, item: &T) -> (u64, u64)
where
    T: Hash,
{
    let hasher1 = &mut self.hashers[0].clone();
    let hasher2 = &mut self.hashers[1].clone();

    item.hash(hasher1);
    item.hash(hasher2);

    let hash1 = hasher1.finish();
    let hash2 = hasher2.finish();

    (hash1, hash2)
}

// this returns g_i(x) = h_1(x) + i * h_2(x)
fn get_index(&self, h1: u64, h2: u64, k_i: u64) -> usize {
    h1.wrapping_add((k_i).wrapping_mul(h2)) as usize % self.optimal_m
}
#+END_SRC

#+name: contains-method
#+BEGIN_SRC rust
pub fn contains(&mut self, item: &T) -> bool
where
    T: Hash,
{
    // hash the given item
    let (h1, h2) = self.hash_kernel(item);

    // run it through the hash functions
    for k_i in 0..self.optimal_k {
	// get the results of each hash function
	let index = self.get_index(h1, h2, k_i as u64);

	// if any of them are 0, return false
	if !self.bitmap.get(index).unwrap() {
	    return false;
	}
    }
    // if they are all 1, return true
    true
}
#+END_SRC

* Generate Fake Data

Lets make it more interesting by generating some data

I'm going to use the [[https://github.com/cksac/fake-rs][fake-rs]] package.

#+name: gen-data
#+BEGIN_SRC rust
// print divider
println!("--------------------------------------------------------\nGenerating Database & Adding to Bloom Filter\n--------------------------------------------------------");

// allocate a vector to store names
let mut name: Vec<String> = Vec::new();

// if i is even insert the name into the bloom filter, else don't
for i in 0..20 {
    name.push(Name(EN).fake());
    match i % 2 {
	0 => {
	    println!("    Adding Name {}:\t{:?}", i + 1, name[i]);
            bloom.insert(&name[i]);
	},
	_ => {
	    println!("Not Adding Name {}:\t{:?}", i + 1, name[i]);
	}
    };
}

// print divider
println!("--------------------------------------------------------\nChecking Bloom Filter\n--------------------------------------------------------");

// now go through the vector of names and check if contained in bloom filter
for i in 0..20 {
    println!("Checking for {}: {}", name[i], bloom.contains(&name[i]));
}
#+END_SRC

* All Together Now
  
Now we can put it all together!

#+BEGIN_SRC rust :noweb yes :crates '((bit-vec . "0.6")(fake . "2.4"))  :tangle bloom_filter/src/main.rs
// add struct and use crates
<<preamble-struct>>

impl<T: ?Sized> StandardBloomFilter<T> {
    // new calculates the size of the bitmap v and optimal_k k and then instantiates a StandardBloomFilter
    <<new-constructor>>

    // Calculate the size of bitmap
    // The size of bitmap depends on the target false positive probability and # of items in the set
    <<bitmap-size>>
    
    // calculate the number of hash functions
    // This only depends on the target false positive probability
    <<num-hash-fns>>

    // add the insert, contains, and helper methods
    <<insert-method>>
    <<contains-method>>
}

fn main() {
    let items_count = 1_000_000;
    let fp_rate = 0.01;

    let mut bloom = StandardBloomFilter::new(items_count, fp_rate);
    // add data
    <<gen-data>>
}
#+END_SRC

#+RESULTS:
#+begin_example
--------------------------------------------------------
Generating Database & Adding to Bloom Filter
--------------------------------------------------------
    Adding Name 1:	"Angelica Mayert"
Not Adding Name 2:	"Fae Trantow"
    Adding Name 3:	"Audreanne Altenwerth"
Not Adding Name 4:	"Mathias Aufderhar"
    Adding Name 5:	"Boris Hermann"
Not Adding Name 6:	"Ellsworth Ruecker"
    Adding Name 7:	"Harry Mante"
Not Adding Name 8:	"Sally Buckridge"
    Adding Name 9:	"Gideon Kuhn"
Not Adding Name 10:	"Will Hintz"
    Adding Name 11:	"Malachi Kuhn"
Not Adding Name 12:	"Collin Nicolas"
    Adding Name 13:	"Charley Johns"
Not Adding Name 14:	"Ramiro Orn"
    Adding Name 15:	"Donavon Lynch"
Not Adding Name 16:	"Jewel Hammes"
    Adding Name 17:	"Geovanni O\'Kon"
Not Adding Name 18:	"Austyn Schamberger"
    Adding Name 19:	"Lloyd Wintheiser"
Not Adding Name 20:	"Melissa Casper"
--------------------------------------------------------
Checking Bloom Filter
--------------------------------------------------------
Checking for Angelica Mayert: true
Checking for Fae Trantow: false
Checking for Audreanne Altenwerth: true
Checking for Mathias Aufderhar: false
Checking for Boris Hermann: true
Checking for Ellsworth Ruecker: false
Checking for Harry Mante: true
Checking for Sally Buckridge: false
Checking for Gideon Kuhn: true
Checking for Will Hintz: false
Checking for Malachi Kuhn: true
Checking for Collin Nicolas: false
Checking for Charley Johns: true
Checking for Ramiro Orn: false
Checking for Donavon Lynch: true
Checking for Jewel Hammes: false
Checking for Geovanni O'Kon: true
Checking for Austyn Schamberger: false
Checking for Lloyd Wintheiser: true
Checking for Melissa Casper: false
#+end_example

# #+name: top
# #+BEGIN_SRC rust
# fn main() {
# #+END_SRC

# #+name: bottom
# #+BEGIN_SRC rust     
# #+END_SRC

# #+name: middle
# #+BEGIN_SRC rust
# println!("Hello, World!");
# #+END_SRC


# #+BEGIN_SRC rust :tangle example.rs :noweb yes
# <<top>>
#     <<middle>>
# <<bottom>>
# #+END_SRC

* Final Code

#+name: final-full
#+BEGIN_SRC rust :crates '((bit-vec . "0.6"))
// add struct and use crates
extern crate bit_vec;
extern crate fake;

// these are used for building the bloom filter
use bit_vec::BitVec;
use std::collections::hash_map::{DefaultHasher, RandomState};
use std::hash::{BuildHasher, Hash, Hasher};
use std::marker::PhantomData;

// these are used to generate fake data
use fake::Fake;
// using `faker` module with locales
use fake::faker::name::raw::*;
use fake::locales::*;

pub struct StandardBloomFilter<T: ?Sized> {
    bitmap: BitVec,
    optimal_m: usize,
    optimal_k: u32,
    hashers: [DefaultHasher; 2],
    _marker: PhantomData<T>,
}


impl<T: ?Sized> StandardBloomFilter<T> {
    // new calculates the size of the bitmap v and optimal_k k and then instantiates a StandardBloomFilter
    // new calculates the size of the bitmap v and optimal_k k and then instantiates a StandardBloomFilter
    pub fn new(items_count: usize, fp_rate: f64) -> Self {
        // get optimals and instantiate hash functions
        let optimal_m = Self::bitmap_size(items_count, fp_rate);
        let optimal_k = Self::optimal_k(fp_rate);
        let hashers = [
    	RandomState::new().build_hasher(),
    	RandomState::new().build_hasher(),
        ];
        // instantiate the bloom filter
        StandardBloomFilter {
    	bitmap: BitVec::from_elem(optimal_m as usize, false),
    	optimal_m,
    	optimal_k,
    	hashers,
    	_marker: PhantomData,
        }
    }

    // Calculate the size of bitmap
    // The size of bitmap depends on the target false positive probability and # of items in the set
    // Calculate the size of bitmap
    // The size of bitmap depends on the target false positive probability and # of items in the set
    fn bitmap_size(items_count: usize, fp_rate: f64) -> usize {
        let ln2_2 = core::f64::consts::LN_2 * core::f64::consts::LN_2;
        ((-1.0f64 * items_count as f64 * fp_rate.ln()) / ln2_2).ceil() as usize
    }
    
    // calculate the number of hash functions
    // This only depends on the target false positive probability
    // calculate the number of hash functions
    // This only depends on the target false positive probability
    fn optimal_k(fp_rate: f64) -> u32 {
        ((-1.0f64 * fp_rate.ln()) / core::f64::consts::LN_2).ceil() as u32
    }

    // add the insert, contains, and helper methods
    pub fn insert(&mut self, item: &T)
    where
        T: Hash,
    {
        let (h1, h2) = self.hash_kernel(item);
    
        for k_i in 0..self.optimal_k {
    	let index = self.get_index(h1, h2, k_i as u64);
    	self.bitmap.set(index, true);
        }
    }
    
    // insert relies on these
    // hash_kernel is where the actual hashing happens.
    // this returns the hash values of h_1(x), h_2(x)
    fn hash_kernel(&self, item: &T) -> (u64, u64)
    where
        T: Hash,
    {
        let hasher1 = &mut self.hashers[0].clone();
        let hasher2 = &mut self.hashers[1].clone();
    
        item.hash(hasher1);
        item.hash(hasher2);
    
        let hash1 = hasher1.finish();
        let hash2 = hasher2.finish();
    
        (hash1, hash2)
    }
    
    // this returns g_i(x) = h_1(x) + i * h_2(x)
    fn get_index(&self, h1: u64, h2: u64, k_i: u64) -> usize {
        h1.wrapping_add((k_i).wrapping_mul(h2)) as usize % self.optimal_m
    }
    pub fn contains(&mut self, item: &T) -> bool
    where
        T: Hash,
    {
        // hash the given item
        let (h1, h2) = self.hash_kernel(item);
    
        // run it through the hash functions
        for k_i in 0..self.optimal_k {
    	// get the results of each hash function
    	let index = self.get_index(h1, h2, k_i as u64);
    
    	// if any of them are 0, return false
    	if !self.bitmap.get(index).unwrap() {
    	    return false;
    	}
        }
        // if they are all 1, return true
        true
    }
}

fn main() {
    let items_count = 1_000_000;
    let fp_rate = 0.01;

    let mut bloom = StandardBloomFilter::new(items_count, fp_rate);
    // add data
    // allocate a vector to store names
    let mut name: Vec<String> = Vec::new();
    
    // if i is even insert the name into the bloom filter, else don't
    for i in 0..20 {
        name.push(Name(EN).fake());
        match i % 2 {
    	0 => {
    	    println!("    Adding Name {}:\t{:?}", i + 1, name[i]);
                bloom.insert(&name[i]);
    	},
    	_ => {
    	    println!("Not Adding Name {}:\t{:?}", i + 1, name[i]);
    	}
        };
    }
    
    // now go through the vector of names and check if contained in bloom filter
    for i in 0..20 {
        println!("Checking for {}: {}", name[i], bloom.contains(&name[i]));
    }
}
#+END_SRC
