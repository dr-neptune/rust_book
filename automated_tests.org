* Writing Automated Tests

* How to Write Tests

  The bodies of test functions typically perform these three actions:
  1. set up any needed data or state
  2. run the code you want to test
  3. assert the results are what you expect

** The Anatomy of a Test Function

   A test in Rust is a function that is annotated with the test attribute. Attributes are metadata about pieces of Rust code.

   To change a function into a test function, add #[test] on the line before fn. When you run your test with the cargo test command, Rust builds a test runner binary that runs the functions annotated with the test attribute and reports on whether the test passes or fails.

   
#+name:
#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    // this makes it a test function
    #[test]
    fn it_works() {
	assert_eq!(2 + 2, 4);
    }
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    // this makes it a test function
    #[test]
    fn exploration() {
	assert_eq!(2 + 2, 4);
    }

    #[test]
    fn another() {
	panic!("Make this test fail!");
    }
}
#+END_SRC

** Checking Results with the assert! Macro

   With the assert! macro, if the value is true, the test passes. If the value is false, the assert! macro calls the panic! macro, which causes the test to fail.

#+name:
#+BEGIN_SRC rust 
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    // returns a boolean, making it a perfect use case for the assert! macro
    fn can_hold(&self, other: &Rectangle) -> bool {
	self.width > other.width && self.height > other.height
    }
}

#[cfg(test)]
mod tests {
    // bring in objects from outside of the tests module
    use super::*;

    // passes!
    #[test]
    fn larger_can_hold_smaller() {
	let larger = Rectangle {
	    width: 8,
	    height: 7,
	};
	let smaller = Rectangle {
	    width: 5,
	    height: 1,
	};

	assert!(larger.can_hold(&smaller));
    }

    // passes since the correct result is false
    #[test]
    fn smaller_cannot_hold_larger() {
	let larger = Rectangle {
	    width: 8,
	    height: 7,
	};
	let smaller = Rectangle {
	    width: 5,
	    height: 1,
	};

	assert!(!smaller.can_hold(&larger));
    }
}
#+END_SRC

** Testing Equality with the assert_eq! and assert_ne! Macros

#+name:
#+BEGIN_SRC rust 
pub fn add_two(a: i32) -> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_adds_two() {
	assert_eq!(4, add_two(2));
    }
}
#+END_SRC

** Adding Custom Failure Messages

   You can also add a custom message to be printed with the failure message as optional arguments to the assert!, assert_eq!, and assert_ne! macros.

#+name:
#+BEGIN_SRC rust 
pub fn greeting(name: &str) -> String {
    format!("Helloooo!")
}

#[cfg(test)]
mod tests {
    use super::*;
    // just check whether the output contains 'something'
    #[test]
    fn greeting_contains_name() {
	let result = greeting("Carol");
	assert!(result.contains("Carol"),
		"Greeting did not contain name, value was `{}`",
		result);
    }
}
#+END_SRC

** Checking for Panics with should_panic

   We also want our code to handle error conditions as we expect

   should panic tests are imprecise because our code could panic for reasons aside from the one we were expecting.
   To make should panic tests more precise, we can add an optional expected parameter to the should_panic attribute.
#+name:
#+BEGIN_SRC rust
pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) -> Guess {
	if value < 1 {
	    panic!("Guess value must be greater than 1, got {}.", value);
	} else if value > 100 {
	    panic!("Guess value must be less than or equal to 100, got {}", value);
	}

	Guess { value }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[should_panic(expected = "Guess value must be less than or equal to 100")]
    fn greater_than_100() {
	Guess::new(200);
    }
}
#+END_SRC

** Using Result<T, E> in Tests

   We can also write tests that use Result<T, E>
   
#+name:
#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() -> Result<(), String> {
	if 2 + 2 == 4 {
	    Ok(())
	} else {
	    Err(String::from("two plus two does not equal four"))
	}
    }
}
#+END_SRC 

* Controlling How Tests Are Run

  You can specify command line options to change the default behavior of cargo test. 
  
** Running Tests in Parallel of Consecutively

   When you run multiple tests, by default they run in parallel using threads. Because they are running at the same time, make sure they don't depend on each other or on any shared state.

   If you don't want to run the tests in parallel, or if you want more fine grained control over the number of threads used, you can do the following:

#+name:
#+BEGIN_SRC bash
cargo test -- --test-threads=1
#+END_SRC

** Showing Function Output

#+name:
#+BEGIN_SRC rust
fn prints_and_returns_10(a: i32) -> i32 {
    println!("I got the value {}", a);
    10
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn this_test_will_pass() {
	let value = prints_and_returns_10(4);
	assert_eq!(10, value);
    }

    #[test]
    fn this_test_will_fail() {
	let value = prints_and_returns_10(8);
	assert_eq!(5, value);
    }
}
#+END_SRC

Note that by default we don't see the printed output for passing tests in our results, only stdout. Failed tests show printed output. 
If we want to see printed values for passing tests as well:

#+name:
#+BEGIN_SRC bash
cargo test -- --show-output
#+END_SRC

** Running a Subset of Tests by Name

   Sometimes running a full test suite can take a long time. We may only wish to run tests pertaining to some specific code.

   We can pass the name or names of the tests we want to run as an argument

#+name:
#+BEGIN_SRC rust
pub fn add_two(a: i32) -> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn add_two_and_two() {
	assert_eq!(4, add_two(2));
    }

    #[test]
    fn add_three_and_two() {
	assert_eq!(5, add_two(3));
    }

    #[test]
    fn one_hundred() {
	assert_eq!(102, add_two(100));
    }
}
#+END_SRC

We can run just one test:

#+name:
#+BEGIN_SRC bash
cargo test one_hundred
#+END_SRC

We can specify part of a test name, and any test matching that will be run

#+name:
#+BEGIN_SRC bash
cargo test add
#+END_SRC

** Ignoring Some Tests Unless Specifically Requested

#+name:
#+BEGIN_SRC rust
#[test]
fn it_works() {
    assert_eq!(2 + 2, 4);
}

#[test]
#[ignore]
fn expensive_test() {
    // code that takes an hour to run
}
#+END_SRC

and if we wish to run the ignored tests

#+name:
#+BEGIN_SRC bash
cargo test -- --ignored
#+END_SRC

* Test Organization

  The Rust community thinks about tests in terms of two main categories: unit tests and integration tests

  Unit tests are small and focused, testing one module in isolation at a time, and can test private interfaces.

  Integration tests are entirely external to your library and use your code in the same way any other external code would, using only the public interface and potentially exercising multiple modules per test.

** Unit Tests

   We put unit tests in the src directory in each file with the code that we're testing.

** Testing Private Functions

#+name:
#+BEGIN_SRC rust :tangle adder/src/lib.rs
pub fn add_two(a: i32) -> i32 {
    internal_adder(a, 2)
}

fn internal_adder(a: i32, b: i32) -> i32 {
    a + b
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn internal() {
	assert_eq!(4, internal_adder(2, 2));
    }
}
#+END_SRC

** Integration Tests

   In Rust, integration tests are entirely external to your library.
   They can only access functions that are a part of your libary's public API. Their purpose is to test whether many parts of your library work together correctly.
   To create integration tests, we first need a tests directory

** The tests Directory

   We create a tests directory at the top level of our project directory, next to src. Cargo knows to look for integration tests in this directory.
   We can then make as many test files as we want to in this directory, and Cargo will compile each of the files as an individual crate.

#+name:
#+BEGIN_SRC rust
// need because each file in the tests directory is a separate crate
use adder;

#[test]
fn it_adds_two() {
    assert_eq!(4, adder::add_two(2));
}
#+END_SRC

We can still run a particular integration test function by specifying the test functions name as an argument to cargo test

** Submodules in Integration Tests

   We can make multiple files in the tests directory, and have each of them be treated as an independent crate.

   When we want to have a file that tests across multiple submodules, we can shape our directory like so:

   tests/common/mod.rs

   Files in subdirectories of the tests directory don't get compiled as separate crates or have sections in the test output.

   After we create it, we can use it from any of the integration test files as a module.

#+name:
#+BEGIN_SRC rust :tangle adder/tests/integration_test.rs
use adder;
mod common;

#[test]
fn it_adds_two() {
    common::setup();
    assert_eq!(4, adder::add_two(2));
}
#+END_SRC
