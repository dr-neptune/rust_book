* Managing Growing Projects with Packages, Crates, and Modules

  Rust has a number of features that allow you to manager your code's organization, including which details are exposed, which details are private, and what names are in each scope in your programs.
  These features, sometimes collectively referred to as the module system, include:

- Packages: A cargo feature that lets you build, test, and share crates
- Crates: A tree of modules that produces a library or executable
- Modules and Use: Let you control the organization, scope, and privacy of paths
- Paths: A way of naming an item, such as struct, function, or module

* Packages and Crates

  A crate is a binary or library. A package is one or more crates that provide a set of functionality. A package contains a Cargo.toml file that describes how to build those crates.

  Say we make a new project with cargo new my-project. Then we have a package that contains src/main.rs -- meaning it only contains a binary crate named my-project. If a package contains src/main.rs and src/lib.rs, it has two crates: a library and a binary, both with the same name as the package. A package can have multiple binary crates by placing files in the src/bin directory. Each file will be a separate binary crate.

* Defining Modules to Control Scope and Privacy

  In this section, we'll talk about modules and other parts of the module system, namely paths that allow you to name items; the use keyword that brings a path into scope; and the pub keyword to make items public. We'll also discuss the as keyword, external packages, and the glob operator.

** Modules

   Modules let us organize code within a crate into groups for readability and easy reuse. Modules also control the privacy of items, which is whether an item can be used by outside code (public) or is an internal implementation detail that is not available for outside use (private).

   We will write a library crate that provides the functionality of a restaurant. We'll define the signatures of functions, but leave their bodies empty to concentrate on the organization of the code rather than actually implement a restaurant in code.
   
#+BEGIN_SRC sh
# make a new library
cargo new --lib restaurant
#+END_SRC

#+name: lib
#+BEGIN_SRC rust 
// start a module with the mod keyword
mod front_of_house {
    // nested module
    mod hosting {
	fn add_to_waitlist() {}
	fn seat_at_table() {}
    }
    // nested module
    mod serving {
	fn take_order() {}
	fn serve_order() {}
	fn take_payment() {}
    }
}
#+END_SRC

src/main.rs and src/lib.rs are called crate roots. The reason for their name is that the contents of either of these two files form a module named crate at the root of the crate's module structure, known as the module tree.

#+name:
#+BEGIN_SRC not-rust
crate
 └── front_of_house
     ├── hosting
     │   ├── add_to_waitlist
     │   └── seat_at_table
     └── serving
         ├── take_order
         ├── serve_order
         └── take_payment
#+END_SRC

* Paths for Referring to an Item in the module tree

  To show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem.

  A path can take two forms:
  - An absolute path starts from a crate root by using a crate name or a literal crate
  - A relative path starts from the current module and uses self, super, or an identifier in the current module

#+name:
#+BEGIN_SRC rust :tangle restaurant/src/lib.rs
pub fn eat_at_restaurant() {
    // absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // relative path
    front_of_house::hosting::add_to_waitlist();
}
#+END_SRC

Unfortunately, it won't build yet because the module hosting is private. Modules organize your code, and they also define a privacy boundary.
In Rust, all items (functions, methods, structs, enums, modules, and constants) are private by default. You can expose inner parts of child modules' code to outer ancestor modules by using the pub keyword to make an item public.

** Exposing Paths with the pub Keyword

   If we were to add the pub keyword to the mod housing, we would still get a compiler error. While the module is public, the contents of hosting are still private. Making a module public doesn't make the contents public. The pub keyword on a module only lets code in its ancestor modules refer to it. 

   We can make the code compile with the following changes:
   
#+name:
#+BEGIN_SRC rust :tangle restaurant/src/lib.rs
mod front_of_house {
    // nested module
    pub mod hosting {
	pub fn add_to_waitlist() {}
	fn seat_at_table() {}
    }
    // nested module
    mod serving {
	fn take_order() {}
	fn serve_order() {}
	fn take_payment() {}
    }
}
#+END_SRC

** Starting Relative Paths with super

   We can also construct relative paths that begin in the parent module by using super at the start of the path. This is like starting a filesystem path with the .. syntax.

#+name:
#+BEGIN_SRC rust
fn serve_order() {}

//
mod back_of_house {
    fn fix_incorrect_order() {
	cook_order();
	// super goes to the parent module, in this case crate, the root
	super::serve_order();
    }

    fn cook_order() {}
}
#+END_SRC
   
** Making Structs and Enums Public

   We can also use pub to designate structs and enums as public, but there are a few extra details.

   If we use pub before a struct definition, we make the struct public, but the struct's fields will still be private.

#+name:
#+BEGIN_SRC rust
mod back_of_house {
    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit: String,
    }
    // since back_of_house::Breakfast has a private field, the struct needs to provide a public associated function that constructs an instance of Breakfast
    // if we don't add the impl, we can't create an instance of Breakfast because we couldn't set the value of the private seasonal_fruit field in eat_at_restaurant
    impl Breakfast {
        pub fn summer(toast: &str) -> Breakfast {
            Breakfast {
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
}

pub fn eat_at_restaurant() {
    // Order a breakfast in the summer with Rye toast
    let mut meal = back_of_house::Breakfast::summer("Rye");

    // Change our mind about what bread we'd like
    meal.toast = String::from("Wheat");
    println!("I'd like {} toast please", meal.toast);
    // this next line won't compile if we uncomment it because seasonal_fruit is private.
    // meal.seasonal_fruit = String::from("blueberries");
}
#+END_SRC

If we make an enum public, all of its variants are then public. We only need the pub before the enum keyword

#+name:
#+BEGIN_SRC rust
mod back_of_house {
    #[derive(Debug)]
    pub enum Appetizer {
        Soup,
        Salad,
    }
}

pub fn eat_at_restaurant() -> (back_of_house::Appetizer, back_of_house::Appetizer) {
    let order1 = back_of_house::Appetizer::Soup;
    let order2 = back_of_house::Appetizer::Salad;
    (order1, order2)
}

fn main() {
    println!(
        "The Soup is:\t{:?}\nThe Salad is:\t{:?}",
        eat_at_restaurant().0,
        eat_at_restaurant().1
    );
}
#+END_SRC

Enums aren't very useful unless their variants are public. It would be annoying to have to annotate all enum variants with pub in every case, so the default for enum variants is to be public.

* Bringing Paths into Scope with the use Keyword

  We can bring a path into a scope once and then call the items in that path as if they're local items with the use keyword.

  
#+name:
#+BEGIN_SRC rust
// bring the crate::front_of_house::hosting module into the scope of the eat_at_restaurant function
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

fn main() {}
#+END_SRC

Adding use and a path in a scope is similar to creating a symbolic link in the filesystem.

We can also bring an item into scope with use and a relative path

#+name:
#+BEGIN_SRC rust
// bring the crate::front_of_house::hosting module into the scope of the eat_at_restaurant function
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use self::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

fn main() {}
#+END_SRC

** Creating Idiomatic use Paths

   Instead of prefixing all the add_to_waitlist calls with the parent module, we could have gone all the way down to calling the fn itself.

#+BEGIN_SRC rust
// bring the crate::front_of_house::hosting module into the scope of the eat_at_restaurant function
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting::add_to_waitlist;

pub fn eat_at_restaurant() {
    add_to_waitlist();
    add_to_waitlist();
    add_to_waitlist();
}

fn main() {}
#+END_SRC

This is not idiomatic rust though. Bringing the function's parent module into scope with use so we have to specify the parent module when calling the function makes it clear that the function isn't locally defined while still minimizing the repetition of typing the full path. The code in the most recent block is unclear as to where add_to_waitlist is defined.

On the other hand, when bringing in structs, enums, and other items with use, its idiomatic to specify the full path.

Here is the idiomatic way to bring the standard library's HashMap struct

#+name:
#+BEGIN_SRC rust
use std::collections::HashMap;

fn main() {
    let mut map = HashMap::new();
    map.insert(1, 2);
}
#+END_SRC

The exception to this idiom is if we're bringing two items with the same name into scope with use statements, because Rust doesn't allow that.

#+name:
#+BEGIN_SRC rust
use std::fmt;
use std::io;

fn function1() -> fmt::Result {
    // --snip--
    Ok(())
}

fn function2() -> io::Result<()> {
    // --snip--
    Ok(())
}

fn main() {}
#+END_SRC

** Providing New Names with the as Keyword

   Another solution to the problem of bringing two types of the same name into the same scope with use it specify a new local name with as for the type

#+name:
#+BEGIN_SRC rust
use std::fmt::Result;
use std::io::Result as IoResult;

fn function1() -> Result {
    Ok(())
}

fn function2() -> IoResult<()> {
    Ok(())
}

fn main() {}
#+END_SRC

** Re-exporting Names with pub use

   When we bring a name into scope with the use keyword, the name available in the new scope is private. To enable the code that calls our code to refer to that name as if it had been defined in that code's scope, we can combine pub and use.
   This technique is called re-exporting because we're bringing an item into scope, but also making that item available for others to bring into their scope.

#+name:
#+BEGIN_SRC rust
mod front_of_house {
    pub mod hosting {
	pub fn add_to_waitlist() {}
    }
}

// by using pub use, external code can now call the add_to_waitlist fn using housing::add_to_waitlist
// with this we can write our code with one structure, but expose a different structure
pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+END_SRC

** Using External Packages

#+name:
#+BEGIN_SRC toml
[dependencies]
rand = "0.5.5"
#+END_SRC

Then, to bring rand definitions into the scope of our package, we added a use line starting with the name of the crate and list the items we wish to bring into scope

#+name:
#+BEGIN_SRC rust
use rand::Rng;

fn main() {
    let secret_number = rand::thread_rng().gen_range(1, 101);

    println!("Our secret number is:\t{}", secret_number);
}
#+END_SRC

** Using Nested Paths to Clean Up Large use Lists

#+name:
#+BEGIN_SRC rust
use std::{cmp::Ordering, io};
use std::io::{self, Write};
#+END_SRC

** The Glob Operator

   If we want to bring all public items defined in a path into scope, we can specify that path followed by *, the glob operator
   
#+name:
#+BEGIN_SRC rust
use std::collections::*;
#+END_SRC

* Separating Modules into Different Files

  When modules get large, we might want to move their definitions to a separate file to make the code easier to navigate.

#+name:
#+BEGIN_SRC rust :tangle restaurants/src/lib.rs
// using a semicolon at the end rather than using a block tells Rust to load the contents of a module from another file with the same name as the module.
mod front_of_house;

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+END_SRC

#+name:
#+BEGIN_SRC rust :tangle restaurants/src/front_of_house.rs
pub mod hosting {
    pub fn add_to_waitlist() {}
}
#+END_SRC

We can also extract the hosting module to its own file as well

#+name:
#+BEGIN_SRC rust :tangle restaurants/src/front_of_house/hosting.rs
pub fn add_to_waitlist() {}
#+END_SRC

