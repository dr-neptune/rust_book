* Enums and Pattern Matching

  Enums allow you to define a type by enumerating its possible variants.
  First we'll define and use an enum to show how an enum can encode meaning along with data.
  Next, we'll explore the Option enum which expresses that a valud can be either something or nothing.
  Then we'll look at how pattern matching in the match expression makes it easy to run different code for different values of an enum.
  Finally we'll cover how the if let construct is another convenient and concise idiom available for handling enums.

  Enums in Rust are most similar to algebraic data types in functional languages like F#, OCaml and Haskell.

* Defining an Enum

  Say we need to work with IP addresses. Currently there are two major standards, IPv4 and IPv6. These are the only possibilities for an IP address that our program will come across.
  We can **enum** erate all possible variants

#+name:
#+BEGIN_SRC rust
// define an enum and list the possible kinds
enum IpAddrKind {
    V4,
    V6,
}

// we could use structs like so
struct IpAddr {
    kind: IpAddrKind,
    address: String,
}

// define a function that takes IpAddrKind
fn route(ip_kind: IpAddrKind) {}

fn main() {
    // create an instance of each kind of IP address
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;

    // call the fn that takes IpAddrKind
    route(IpAddrKind::V4);
    route(IpAddrKind::V6);

    // define with structs
    let home1 = IpAddr {
        kind: IpAddrKind::V4,
        address: String::from("127.0.0.1"),
    };

    let loopback1 = IpAddr {
        kind: IpAddrKind::V6,
        address: String::from("::1"),
    };
}
#+END_SRC

We could represent the same concept in a more concise way using just an enum by putting data directly into each enum variant

#+name:
#+BEGIN_SRC rust
// // we can put data directly inside an enum variant
// enum IpAddr {
//     V4(String),
//     V6(String),
// }

// each variant can have different types and amounts of associated data
enum IpAddr {
    V4(u8, u8, u8, u8),
    V6(String),
}

fn main() {
    // we attach data directly, so there is no need for an extra struct
    // let home = IpAddr::V4(String::from("127.0.0.1"));
    // let loopback = IpAddr::V4(String::from("::1"));

    // with the new variant
    let home = IpAddr::V4(127, 0, 0, 1);
    let loopback = IpAddr::V6(String::from("::1"));
}
#+END_SRC

Here is how the standard library defines IpAddr:

#+name:
#+BEGIN_SRC rust
struct Ipv4Addr {
    // -- snip
}

struct Ipv6Addr {
    // --snip
}

enum IpAddr {
    V4(Ipv4Addr),
    V6(Ipv6Addr),
}
#+END_SRC

Here is another example of an enum, with a wide variety of types embedded in its variants

#+name:
#+BEGIN_SRC rust
enum Message {
    Quit, // no data associated with it
    Move { x: i32, y: i32 }, // anonymous struct 
    Write(String), // String
    ChangeColor(i32, i32, i32), // tuple of integers
}

// the equivalent with structs
struct QuitMessage;
struct MoveMessage {
    x: i32,
    y: i32,
}
struct WriteMessage(String); // tuple struct
struct ChangeColorMessage(i32, i32, i32); // tuple struct
#+END_SRC

If we used the different structs, each of which have their own type, we couldn't as easily define a function to take any of these kinds of messages as we do with the Message enum, which is a single type

We can also define methods on enums like we do on structs

#+name:
#+BEGIN_SRC rust
enum Message {
    Quit,                       // no data associated with it
    Move { x: i32, y: i32 },    // anonymous struct
    Write(String),              // String
    ChangeColor(i32, i32, i32), // tuple of integers
}

impl Message {
    fn call(&self) {
        println!("Calling Write: {}", self.Write);
    }
}

fn main() {
    let m = Message::Write(String::from("Hello"));
    m.call();
}
#+END_SRC

** The Option Enum and its Advantages Over Null Values

   The Option type encodes the scenario in which a value could be something or it could be nothing. Expressing this concept in terms of the type system means the compiler can check whether you've handled all the cases you should be handling.

   Rust doesn't have the NULL feature many other languages have. The problem with null values is that if you try to use a null value as a not null value, you'll get an error of some kind. Rust does have an enum that can encode the concept of a value being present or absent. This is Option<T>

#+name:
#+BEGIN_SRC rust
enum Option<T> { // the T is a generic type parameter. <T> means the Some variant of the Option enum can hold one piece of data of any type. 
    Some(T),
    None,
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
fn main() {
    let some_number = Some(5);
    let some_string = Some("a string");
    let absent_number: Option<i32> = None; // if we use None rather than Some, we need to tell Rust what type of Option<T> we have
}
#+END_SRC

When we have a Some value, we know that a value is present, and the value is held by Some.
When we have a None value, in some sense, it means the same thing as Null. This is better than Null because Option<T> and T (where T can be any type) are different types, the compiler won't let us use an Option<T> value as if it were definitely a valid value. 
In other words, we have to convert an Option<T> to a T before we can perform T operations with it. Generally, this helps catch one of the most common issues with null: assuming that something isn't null when it actually it.
This helps us to be more confident in our code, since in order to have a value that can possibly be null, we must explicitly opt in by making the type of that value Option<T>. Then, when we use that value, we are required to explicitly handle the case when the value is null. Everywhere where a value has a type that isn't an Option<T>, we can safely assume that the value isn't null. 

In general, in order to use an Option<T> value, we want to have some code that will handle each variant. We want some code that will run only when we have a Some(T) value, and this code is allowed to use the inner T. You want some other code to run if we have a None value, and that code doesn't have a T value available. The match expression is a control flow construct that does just this when used with enums: it will run different code depending on which variant of the enum it has, and that code can use the data inside the matching value.

* The match Control Flow Operator



