* Generic Types, Traits, and Lifetimes

  In Rust, we use generics as a tool for effectively handling the duplication of concepts. Generics are abstract stand-ins for concrete types or other properties.
  When writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.

  First we'll review how to extract a function to reduce code duplication. Next, we'll use the same technique to make a generic function from two functions that differ only in the types of their parameters.

  Then we'll use traits to define behavior in a generic way. We can combine traits with generic types to constrain a generic type to only those types that have a particular behavior.

  Then we'll discuss lifetimes, a variety of generics that give the compiler information about how references relate to each other.
  
** Removing Duplication by Extracting a Function

   Consider the following program:
   
#+name:
#+BEGIN_SRC rust
fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let mut largest = number_list[0];

    for number in number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);
}
#+END_SRC

If we wish to do this over multiple lists, we should write a function

#+name:
#+BEGIN_SRC rust
fn largest(list: &[i32]) -> &i32 {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
}
#+END_SRC

We've abstracted the process into a function. We:

1. Identified duplicate code
2. Extracted the duplicate code into the boyd of the function and specified the inputs and return values of that code in the function signature
3. Updated the two instances of duplicated code to call the function instead

Next we'll use the same steps with generics to reduce code duplication in different ways. In the same way that the function body can operator on an abstract list instead of specific values, generics allow code to operate on abstract types.

* Generic Data Types

  We use generics to create definitions for items like function signatures or structs, which we can then use with many different concrete data types.

** In Function Definitions

   When defining a fn that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value.

#+name:
#+BEGIN_SRC rust
fn largest_i32(list: &[i32]) -> &i32 {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn largest_char(list: &[char]) -> &char {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }
    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];
    let char_list = vec!['y', 'm', 'a', 'q'];

    println!("The largest number is {}", largest_i32(&number_list));
    println!("The largest char is {}", largest_char(&char_list));
}
#+END_SRC

The function bodies have the same code, so let's eliminate the duplication by introducing a generic type parameter in a single function.

To parameterize the types in the new function we need to name the type parameter, just as we do for the value parameters to a function. We can use any identifier as a type parameter name.

Similar to declaring a parameter in the body of a function in the function signature, we have to declare the type parameter name in the signature so the compiler knows what that name means.

We use a signature like:

#+name:
#+BEGIN_SRC rust
fn largest<T>(list: &[T]) -> &T {
#+END_SRC

which can be read as: the function largest is generic over some type T. This function has a parameter named list, which is a slice of values of type T. The largest function will return a reference to a value of the same type T.

#+name:
#+BEGIN_SRC rust
fn largest<T>(list: &[T]) -> &T {
    let mut largest = &list[0];

    for item in list {
	if item > largest {
	    largest = item;
	}
    }
    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];
    let char_list = vec!['y', 'm', 'a', 'q'];

    println!("The largest number is {}", largest_i32(&number_list));
    println!("The largest char is {}", largest_char(&char_list));
}
#+END_SRC

If we run that, we get an error. It mentions std::cmp::PartialOrd which is a trait. This error is saying that the body of largest won't work for all possible types that T could be.
Because we want to compare values of type T in the boyd, we can only use types whose values can be ordered. 

** In Struct Definitions

   We can also define structs to use a generic type parameter in one or more fields using the <> syntax.

#+BEGIN_SRC rust
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1.0, y: 4.0 };

    println!("x: {:?} y: {:?}", float.x, float.y);
}
#+END_SRC

Note that because we've used only one generic type to define Point<T>, this definition says that the Point<T> struct is generic over some type T, and the fields x and y are both the same type.

To define a Point struct where x and y are both generics but could have different types, we can use multiple generic type parameters.

#+name:
#+BEGIN_SRC rust
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    let both_integer = Point { x: 5, y: 10 };
    let both_float = Point { x: 1.0, y: 4.0 };
    let integer_and_float = Point { x: 5, y: 4.0 };
}
#+END_SRC

** In Enum Definitions

   Let's look again at the Option enum:
   
#+name:
#+BEGIN_SRC rust
enum Option<T> {
    Some(T),
    None,
}
#+END_SRC

enums can use multiple generic types as well

#+name:
#+BEGIN_SRC rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+END_SRC

When you recognize situations in your code with multiple struct or enum definitions that differ only in the types of values they hold, you can avoid duplication by using generic types instead.

** In Method Definitions

   We can implement methods on structs and enums and use generic types in their definitions too

#+name:
#+BEGIN_SRC rust
struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}

impl Point<f32> {
    fn distance_from_origin(&self) -> f32 {
        (self.x.powi(2) + self.y.powi(2)).sqrt()
    }
}

fn main() {
    let p = Point { x: 5, y: 10 };
    let q = Point { x: 5.0, y: 10.0 };
    println!(
        "p.x = {}\nd(Origin) = {}\nq.x = {}",
        p.x(),
        q.distance_from_origin(),
        q.x()
    );
}
#+END_SRC

Note that we have to declare T just after impl so we can use it to specify that we're implementing methods on the type Point<T>.

Generic type parameters in a struct definition aren't always the same as those you use in that struct's method signatures.

#+name:
#+BEGIN_SRC rust
struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y,
        }
    }
}

fn main() {
    let p1 = Point { x: 5, y: 10.4 };
    let p2 = Point { x: "Hello", y: 'c' };
    let p3 = p1.mixup(p2);

    println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
}
#+END_SRC

The purpose of this example is to demonstrate a situation in which some generic parameters are declared with impl and some are declared with the method definition. 

** Performance of Code Using Generics

   Rust implements generics in such a way that your code doesn't run any slower using generic types than it would with concrete types.
   It accomplishes this by performing monomorphization of the code that is using generics at compile time. Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.
 
* Traits: Defining Shared Behavior

  A trait tells the Rust compiler about functionality a particular type has and can share with other types. We can use traits to define shared behavior in an abstract way.
  We can use trait bounds to specify that a generic can be any type that has a certain behavior.

** Defining a Trait

   A type's behavior consists of the methods that we can call on that type. Different types share the same behavior if we can call the same methods on all those types. Trait definitions are a
   way to group method signatures together to define a set of behaviors necessary to accomplish some purpose.

   Suppose we want to make a media aggregator library that can display summaries of data that might be stored in a NewsArticle or Tweet instance.

   To do this, we need a summary from each type, and we need to request that summary by calling a summarize method on an instance.
   
#+name:
#+BEGIN_SRC rust
pub trait Summary {
    // define method signatures that describe the behaviors of the types that can implement this trait
    // the compiler will enforce that any type that has the Summary trait will have the method summarize defined with this signature exactly.
    fn summarize(&self) -> String;
}
#+END_SRC

** Implementing a Trait on a Type

   Now that we've defined the Summary trait, we can implement it on the types in our media aggregator.
   
#+name:
#+BEGIN_SRC rust
#![allow(unused)]
pub trait Summary {
    fn summarize(&self) -> String;
}

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, self.content)
    }
}

fn main() {
    let example = NewsArticle {
        headline: "To the Internet!".to_string(),
        location: "The Internet".to_string(),
        author: "Everyone".to_string(),
        content: "yes".to_string(),
    };

    let example2 = Tweet {
        username: "blah".to_string(),
        content: "not much to say".to_string(),
        reply: true,
        retweet: true,
    };

    println!(
        "News Article:\t{}\nTweet:\t{}",
        example.summarize(),
        example2.summarize()
    );
}
#+END_SRC

Implementing a trait on a type is similar to implementing regular methods.
The difference is that after impl, we put the trait name that we want to implement, then use the for keyword, and then specify the name of the type we want to implement the trait for.

One restriction to note with trait implementations is that we can implement a trait on a type only if either the trait or the type is local to our crate.

** Default Implementations

   Sometimes it's useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type.
   Then, as we implement the trait on a particular type, we can override each method's default behavior.

   We can specify a default string for the summarize method of the Summary trait instead of defining the method signature:

#+name:
#+BEGIN_SRC rust
pub trait Summary {
    fn summarize(&self) -> String {
	String::from("(Read more...)")
    }
}
#+END_SRC

To use a default implementation to summarize, we specify an empty impl block

#+name:
#+BEGIN_SRC rust
pub trait Summary {
    fn summarize(&self) -> String {
        String::from("(Read more...)")
    }
}

impl Summary for NewsArticle {}

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

fn main() {
    let article = NewsArticle {
        headline: "Penguins".to_string(),
        location: "Antarctica".to_string(),
        author: "GTP4".to_string(),
        content: "The Pittsburgh Penguins have somehow ended up in Antarctica".to_string(),
    };

    println!("News Article:\t{}", article.summarize());
}
#+END_SRC

Creating a default implementation for summarize doesn't allow us to change anything about the implementation of summary on another struct. The syntax for implementing a default implementation is the same as the syntax for implementing a trait method that doesn't have a default implementation.

Default implementations can call other methods in the same trait, even if those other methods don't have a default implementation. In this way, a trait can provude a lot of useful functionality and only require implementors to specify a small part of it.

#+name:
#+BEGIN_SRC rust
#![allow(unused)]

// we only need to define summarize_author when we implement the trait on a type
pub trait Summary {
    fn summarize_author(&self) -> String;

    fn summarize(&self) -> String {
        format!("(Read more from {}...)", self.summarize_author())
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize_author(&self) -> String {
        format!("@{}", self.username)
    }
}

fn main() {
    let tweet = Tweet {
        username: "horse_ebooks".to_string(),
        content: "Of course, as you probably know, people".to_string(),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet: {}", tweet.summarize());
}
#+END_SRC

Note that it isn't possible to call the default implementation from an overriding implementation of that same method.

** Traits as Parameters

   Now that we know how to define and implement traits, we can explore how to use traits to define functions that accept many different types.

   We can define a notify function that calls the summarize method on its item parameter, which is of some type that implements the Summary trait.

#+name:
#+BEGIN_SRC rust
pub trait Summary {
    fn summarize(&self) -> String;
}

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, self.content)
    }
}

pub fn notify(item: &impl Summary) {
    println!("Breaking News! {}", item.summarize());
}

fn main() {}
#+END_SRC

Instead of a concrete type for the item parameter, we specify the impl keyword and the trait name. This parameter accepts any type that implements the specified trait.

** Trait Bound Syntax

   The impl Trait syntax works for straight-forward cases, but is actually syntactic sugar for a longer form, which is called a trait bound:

#+name:
#+BEGIN_SRC rust
pub fn notify<T: Summary>(item: &T) {
    println!("Breaking News! {}", item.summarize());
}
#+END_SRC

If we want to allow item1 and item2 to have different types, using impl Trait would be appropriate (as long as both types implement Summary).

#+name:
#+BEGIN_SRC rust
pub fn notify(item1: &impl Summary, item2: &impl Summary) {

}
#+END_SRC

If we want to force both parameters to have the same type, that's only possible to express using a trait bound like this:

#+name:
#+BEGIN_SRC rust
pub fn notify<T: Summary>(item1: &T, item2: &T) {

}
#+END_SRC

** Specifying Multiple Trait Bounds with the + Syntax

   We can also specify more than one trait bound.

#+name:
#+BEGIN_SRC rust
pub fn notify(item: &(impl Summary + Display)) {}
#+END_SRC

also works with trait bounds on generic types

#+name:
#+BEGIN_SRC rust
pub fn notify<T: Summary + Display>(item: &T) {}
#+END_SRC

** Clearer Trait Bounds with where Clauses

   Each generic has its own trait bounds, so functions with multiple generic type parameters can contain lots of trait bound information between the function's name and its parameter list.

   Instead of writing this

#+name:
#+BEGIN_SRC rust
fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {}
#+END_SRC

We can use a where clause like this:

#+name:
#+BEGIN_SRC rust
fn some_function<T, U>(t: &T, u: &U) -> i32
where T: Display + Clone,
      U: Clone + Debug {
    
}
#+END_SRC

** Returning Types that Implement Traits

   We can also use the impl Trait syntax in the return position to return a value of some type that implements a trait

#+name:
#+BEGIN_SRC rust
fn returns_summarizable() -> impl Summary {
    Tweet {
	username: String::from("horse_ebooks"),
	content: String::from("of course, as you probably already know, people"),
	reply: false,
	retweet: false,
    }
}
#+END_SRC

The ability to return a type that is only specified by the trait it implements is especially useful in the context of closures and iterators. Closures and iterators create types that only the compiler knows or types that are very long to specify. The impl Trait syntax lets you concisely specify that a function returns some type that implements the Iterator trait without needing to write out a very long type.

However, you can only use impl Trait if you're returning a single type. For example, code that returns either a news article or a tweet wouldn't work.
We'll cover how to write a fn with this behavior in ch 17.

** Fixing the largest Function with Trait Bounds

   Previously we tried to fun the largest fn with generic type parameters, but it did not compile since "T needed a bound for std::cmp::PartialOrd"
   In the body of largest, we wanted to compare two values of type T using the greater than > operator.
   Since this operator is defined as a default method on the std lib trait std::cmp::PartialOrd, we need to specify PartialOrd in the trait bounds for T so the largest function can work on slices of any type that we can compare.

#+name:
#+BEGIN_SRC rust
// change the signature of largest
fn largest<T: PartialOrd>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list {
	if item > largest {
	    largest = item;
	}
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];
    let result = largest(&number_list);
    let char_list = vec!['y', 'm', 'a', 'q'];
    println!("The largest number is {}", result);
    let result = largest(&char_list);
    println!("The largest char is {}", result);
}
#+END_SRC

Unfortunately, this still doesn't work. With our non-generic versions of the largest fn we are trying to find the largest i32 or char. These types have a known size that can be stored on the stack, so they implement the Copy trait.
When we made the fn generic, it became possible for the list parameter to have types in it that don't implement the Copy trait. Consequently, we wouldn't be able to move the value out of list[0] and into the largest variable.

To call this code with only those types that implement the Copy trait, we can add Copy to the trait bounds of T

#+name:
#+BEGIN_SRC rust
// change the signature of largest
fn largest<T: PartialOrd + Copy>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];
    let result = largest(&number_list);
    let char_list = vec!['y', 'm', 'a', 'q'];
    println!("The largest number is {}", result);
    let result = largest(&char_list);
    println!("The largest char is {}", result);
}
#+END_SRC

: The largest number is 100
: The largest char is y

If we don't want to restrict the largest function to the types that implement the Copy trait, we could specify that T has the trait bound Clone instead of copy.
Using the clone function means we're potentially making more heap allocations in the case of types that own heap data like String, which could be slow when working with a lot of data.

** Using Trait Bounds to Conditionally Implement Methods

   By using a trait bound with an impl block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits.
   
#+name:
#+BEGIN_SRC rust
use std::fmt::Display;

struct Pair<T> {
    x: T,
    y: T,
}

impl<T> Pair<T> {
    fn new(x: T, y: T) -> Self {
        Self { x, y }
    }
}

impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        if self.x >= self.y {
            println!("The largest member is x = {}", self.x);
        } else {
            println!("The largest member is y = {}", self.y);
        }
    }
}

fn main() {
    let value = Pair { x: 2.0, y: 3.0 };
    let other_value = Pair {
        x: String::from("Hello"),
        y: String::from("World!"),
    };

    value.cmp_display();
    other_value.cmp_display();
} 
#+END_SRC

We can also conditionally implement a trait for any type that implements another trait.
Implementations of a trait on any type that satisfies the trait bounds are called blanket implementations and are extensively used in the Rust standard library.

For example, the std lib implements the ToString trait on any type that implements the Display trait.

#+name:
#+BEGIN_SRC rust
impl<T: Display> ToString for T {}
#+END_SRC

Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be.

* Validating References with Lifetimes

  Every reference in Rust has a lifetime, which is the scope for which that reference is valid.

** Preventing Dangling References with Lifetimes

   The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it's intended to reference.

#+name:
#+BEGIN_SRC rust
fn main() {
    {
	let r;
	{
	    let x = 5;
	    r = &x;
	}

	println!("r: {}", r);
    }
}
#+END_SRC

#+BEGIN_SRC rust
error[E0597]: `x` does not live long enough
  --> src/main.rs:7:10
   |
7  |         r = &x;
   |             ^^ borrowed value does not live long enough
8  |     }
   |     - `x` dropped here while still borrowed
9  | 
10 |     println!("r: {}", r);
   |                       - borrow later used here
#+END_SRC

** The Borrow Checker

   The Rust compiler has a borrow checker that compares scopes to determine whether all borrows are valid.

   In the case above, we have a reference (let r;) that lives longer than the value it is referencing (the nested r = &x;).

   We would need to arrange the code like so:

#+name:
#+BEGIN_SRC rust
fn main() {
    {
        let x = 5;
        let r = &x;
        println!("r: {}", r);
    }
}
#+END_SRC

Here x has a lifetime 'b which is larger than r's lifetime 'a. This means r can reference x because Rust knows that the reference in r will always be valid while x is valid.

** Generic Lifetimes in Functions

#+name:
#+BEGIN_SRC rust
// return the longer of two string slices
fn longest(x: &str, y: &str) -> &str {
    if x.len() > y.len() {
	x
    } else {
	y
    }
}

fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";
    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
#+END_SRC


In this case, we get this error:

#+name:
#+BEGIN_SRC rust
error[E0106]: missing lifetime specifier
 --> src/main.rs:3:33
  |
3 | fn longest(x: &str, y: &str) -> &str {
  |               ----     ----     ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`
help: consider introducing a named lifetime parameter
  |
3 | fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
  |           ^^^^    ^^^^^^^     ^^^^^^^     ^^^
#+END_SRC

So Rust can't tell whether the reference being returned refers to x or y.

The borrow checker can't determine which it is because it doesn't how how the lifetimes of x and y relate to the lifetime of the return value.
To fix this error, we'll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.

** Lifetime Annotation Syntax

   Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.

#+name:
#+BEGIN_SRC rust
&i32        // a reference
&'a i32     // a reference with an explicit lifetime
&'a mut i32 // a mutable reference with an explicit lifetime
#+END_SRC

One lifetime annotation doesn't have much meaning, because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other.

Suppose we have a function with parameters first and second which are both i32s with the lifetime 'a. The lifetime annotations indicate that the references first and second must both live as long as that generic lifetime.

** Lifetime Annotations in Function Signatures

#+name:
#+BEGIN_SRC rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";
    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
#+END_SRC

Our lifetimes in the longest fn say that for some lifetime 'a, both of the string slices x and y will live at least as long as the lifetime 'a. Furthermore, the str that it returns will live at least that long as well.

When we pass concrete references to longest, the concrete lifetime that is substituted for 'a is the part of the scope of x that overlaps with the scope of y. In other words, the lifetime 'a will be equal to the smallest scope of the variables annotated with that lifetime.

Let's ook at that restriction

#+name:
#+BEGIN_SRC rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

// pass in references with different concrete lifetimes
fn main() {
    let string1 = String::from("Long string is long");

    {
        let string2 = String::from("xyz");
        let result = longest(string1.as_str(), string2.as_str());
	// inside the smaller scope works
        // println!("The longest string is {}", result);
    }
    // outside of the smaller scope fails
    println!("The longest string is {}", result);
}
#+END_SRC

** Thinking in Terms of Lifetimes

   The way you need to specify lifetime parameters depends on what your function is doing.

   If the lifetime of y has no bearing on the lifetime of x or the return value, we don't need to specify its lifetime:
   
#+name:
#+BEGIN_SRC rust
fn longest<'a>(x: &'a str, y: &str) -> &'a str {
    x
}

fn main() {}
#+END_SRC

When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters. If the reference returned does not refer to one of the parameters, it must refer to a value created within this function, which would be a dangling reference because the value will go out of scope at the end of the function.

For example, this won't work:

#+name:
#+BEGIN_SRC rust
fn longest<'a>(x: &str, y: &str) -> &'a str {
    let result = String::from("Really long string");
    result.as_str()
}

fn main() {
    
}
#+END_SRC

This fails because the return value lifetime is not related to the lifetime of the parameters at all. The problem above is that result gets cleaned up at the end of longest, but its trying to return a reference to result from the function.

Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they're connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.

** Lifetime Annotations in Struct Definitions

   It's possible for structs to hold references, but we would need to add a lifetime annotation on every reference in teh struct's definition.

#+name:
#+BEGIN_SRC rust
struct ImportantExcerpt<'a> {
    part: &'a str,
}

fn main() {
    let novel = String::from("Call me Ishmael. Some years ago...");
    let first_sentence = novel.split('.').next().expect("Could not find a '.'");
    let i = ImportantExcerpt {
        part: first_sentence,
    };

    println!("{}", i.part);
}
#+END_SRC
   
** Lifetime Elision

   Some patterns are so common that the Rust compiler takes care of them for us.
   Here is an example:

#+name:
#+BEGIN_SRC rust
// each parameter that is a reference gets its own lifetime parameter 
fn first_word(s: &str)
fn foo(x: i32, y: i32)
// turns into
fn first_word<'a>(s: &'a str)
fn foo<'a, 'b>(x: &'a i32, y: &'b i32)

// if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime paremters
fn foo<'a>(x: &'a i32) -> &'a i32

// if there are multiple lifetime parameters, but one of them is &self or &mut self because this is a method, the lifetime of self is assigned to all output lifetime parameters.
#+END_SRC

** Lifetime Annotations in Method Definitions

   Where we declare and use the lifetime parameters depends on whether they're related to the struct fields or the method parameters and return values.

   Lifetime names for struct fields always need to be declared after the impl keyword and then used after the struct's name, because those lifetimes are part of the struct's type.

#+name:
#+BEGIN_SRC rust
struct ImportantExcerpt<'a> {
    part: &'a str,
}

impl<'a> ImportantExcerpt<'a> {
    // we're not required to annotate the reference to self because of the first elision rule
    fn level(&self) -> i32 {
	3
    }
}
#+END_SRC
     
** The Static Lifetime

   The 'static lifetime means the reference can live of the entire duration of the program. All string literals have the 'static lifetime, which we can annotate as follows:

#+name:
#+BEGIN_SRC rust
fn main() {
    let s: &'static str = "I have a static lifetime";
}
#+END_SRC

** Generic Type Parameters, Trait Bounds, and Lifetimes together

#+name:
#+BEGIN_SRC rust
use std::fmt::Display;

fn longest_with_an_announcement<'a, T>(x: &'a str, y: &'a str, ann: T) -> &'a str
where
    T: Display,
{
    println!("Announcement! {}", ann);
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let s1 = "yes";
    let s2 = "no";
    println!("{}", longest_with_an_announcement(s1, s2, "Woohoo!"));
}
#+END_SRC

#+RESULTS: 
: Announcement! Woohoo!
: yes
