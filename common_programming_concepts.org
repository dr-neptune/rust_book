* Common Programming Concepts

* Variables and Mutability

By default variables are immutable (awesome).
When a variable is immutable, once a value is bound to a name, you can't change that value.

#+name:
#+BEGIN_SRC rust
fn main() {
    let x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}
#+END_SRC

Nets us:

#+BEGIN_SRC
error[E0384]: cannot assign twice to immutable variable `x`
 --> src/main.rs:5:5
  |
3 |     let x = 5;
  |         -
  |         |
  |         first assignment to `x`
  |         help: make this binding mutable: `mut x`
4 |     println!("The value of x is: {}", x);
5 |     x = 6;
  |     ^^^^^ cannot assign twice to immutable variable

error: aborting due to previous error

For more information about this error, try `rustc --explain E0384`.
error: could not compile `cargotQsaTD`.

To learn more, run the command again with --verbose.
#+END_SRC

We can also force mutability by adding mut to the front of the variable name:

#+name:
#+BEGIN_SRC rust
fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}
#+END_SRC

** Differences Between Variables and Constants

   Constants are immutable by default and you aren't allowed to use mut with constants.
   We can declare constants using the const keyword instead of the let keyword, and the type of the value must be annotated.
   They can be declared in any scope, even global scope.

#+name:
#+BEGIN_SRC rust
const MAX_POINTS: u32 = 100_000;
#+END_SRC

** Shadowing

   As we saw in the guessing game, we can declare a new variable with the same name as a previous variable, and the new variable shadows the previous variable.
   When the first variable is /shadowed/ by the second, the second variable's value is what is used when the variable is called.

#+name:
#+BEGIN_SRC rust
fn main() {
    let x = 5;
    let x = x + 1;
    let x = x * 2;

    println!("The value of x is: {}", x);
}
#+END_SRC

Shadowing is different from marking a variable as mut because we'll get a compile time error is we accidentally try to reassign this variable without using the let keyword.
By using let, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.

The other difference between mut and shadowing is that because we're effectively creating a new variable when we use the let keyword again, we can change the type of the value but reuse the same name.

For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:

#+name:
#+BEGIN_SRC rust
fn main() {
    let spaces = "  ";
    let spaces = spaces.len();
    println!("Spaces: {}", spaces);
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
fn main() {
    let mut spaces = "  ";
    let spaces = spaces.len();
    println!("Spaces: {}", spaces);
}
#+END_SRC

#+BEGIN_SRC
warning: variable does not need to be mutable
 --> src/main.rs:3:9
  |
3 |     let mut spaces = "  ";
  |         ----^^^^^^
  |         |
  |         help: remove this `mut`
  |
  = note: `#[warn(unused_mut)]` on by default

warning: 1 warning emitted

warning: variable does not need to be mutable
 --> src/main.rs:3:9
  |
3 |     let mut spaces = "  ";
  |         ----^^^^^^
  |         |
  |         help: remove this `mut`
  |
  = note: `#[warn(unused_mut)]` on by default

warning: 1 warning emitted

Spaces: 2
#+END_SRC

The book says we will get an error. I only got a warning.

* Data Types

In this section we will look at 2 data type subsets: scalar and compound.

In cases where many types are possible, such as when we converted a String to a numeric type using parse, we must add a type annotation like this:

#+name:
#+BEGIN_SRC rust
fn main() {
    let guess: u32 = "42".parse().expect("Not a number!");
    println!("{}", guess);
}
#+END_SRC

If we don't add the type annotation, it won't compile:

#+name:
#+BEGIN_SRC rust
fn main() {
    let guess = "42".parse().expect("Not a number!");
    println!("{}", guess);
}
#+END_SRC


#+BEGIN_SRC 
error[E0282]: type annotations needed
 --> src/main.rs:3:9
  |
3 |     let guess = "42".parse().expect("Not a number!");
  |         ^^^^^ consider giving `guess` a type

error: aborting due to previous error

For more information about this error, try `rustc --explain E0282`.
error: could not compile `cargoFSEIjc`.
#+END_SRC

To learn more, run the command again with --verbose.

** Scalar Types

   A scalar type represents a single value. Rust has 4 primary scalar types: integers, floating-point numbers, Booleans, and characters.

   
** Integer Types

   An integer is a number without a fractional component.

   Here are the built in integer types for rust:

| Length  | Signed | Unsigned |
|---------+--------+----------|
| 16 bit  | i16    | u16      |
| 32 bit  | i32    | u32      |
| 64 bit  | i64    | u64      |
| 128 bit | i128   | u128     |
| arch    | isize  | usize    |

Signed and unsigned refer to whether it's possible for the number to be negative, i.e. whether it needs to have a sign (signed) or not (unsigned).

If you're unsure of which integer to use, Rust defaults to i32 which is generally the fastest (even on 64 bit systems).
The primary situation in which you'd use isize or usize is when indexing some sort of collection.

** Floating Point Types

   Rusts floating point types are f32 and f64. The default is f64.
   
#+name:
#+BEGIN_SRC rust
fn main() {
    let x = 2.0; // f64
    let y: f32 = 3.0; //f32
}
#+END_SRC

*** Numeric Operations

 #+name:
 #+BEGIN_SRC rust
fn main() {
    // addition
    let sum = 5 + 10;

    // subtraction
    let difference = 95.5 - 4.3;

    // multiplication
    let product = 4 * 30;

    // division
    let quotient = 56.7 / 32.3;

    // remainder
    let remainder = 43 % 5;

    println!(
        "Sum:\t\t{}\nDifference:\t{}\nProduct:\t{}\nQuotient:\t{}\nRemainder:\t{}",
        sum, difference, product, quotient, remainder
    );
}
 #+END_SRC

*** The Boolean Type

 #+name:
 #+BEGIN_SRC rust
fn main() {
    let t = true;
    let f: bool = false; // with explicit type annotation
}
 #+END_SRC

*** The Character Type
   
 #+name:
 #+BEGIN_SRC rust
fn main() {
    let c = 'z';
    let z = 'ℤ';
    let heart_eyed_cat = '😻';

    println!("{}{}{}", c, z, heart_eyed_cat);
}
 #+END_SRC

** Compound Types

   Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.

*** The Tuple Type

    A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.

#+name:
#+BEGIN_SRC rust
// create a tuple
fn main() {
    // create a tuple
    let tup: (i32, f64, u8) = (500, 6.4, 1);

    // destructure the tuple
    let (x, y, z) = tup;

    println!(
        "The value of x is:\t{}\nThe value of y is:\t{}\nThe value of z is:\t{}",
        x, y, z
    );

    // access tuple elements directly using period
    let five_hundred = tup.0;
    let six_point_four = tup.1;
    let one = tup.2;
    println!(
        "Our tuple:\t\t({}, {}, {})",
        five_hundred, six_point_four, one
    );
}
#+END_SRC

*** The Array Type

    Arrays:
    Unlike a tuple, every element of an array must have the same type.
    Arrays in rust differ from arrays in some other languages because they have a fixed length, like tuples.
    Arrays are useful when we want our data allocated on the stack rather than on the heap, or when we want to ensure we always have a fixed number of elements.

    Vectors:
    A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If we are unsure whether to use an array or vector, we should probably use a vector.
    
#+name:
#+BEGIN_SRC rust
fn main() {
    // define an array
    let _a = [1, 2, 3, 4, 5];
    let _a: [i32; 5] = [1, 2, 3, 4, 5]; // explicit type declaration and length.
    let a = [3; 5]; // returns an array with 5 elements, all of which are 3.
                    // example of good vector use. no adding / deletion
    let months = [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
    ];

    // accessing array elements
    let first = a[0];
    let second = a[1];

    for i in 0..a.len() {
        println!("Month:\t{}\nA:\t{}", months[i], a[i]);
        println!("First:\t{}\nSecond:\t{}", first * i, second * i);
    }
}
#+END_SRC

* Functions

In function signatures, you must declare the type of each parameter. Requiring type annotations in function definitions means that the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.

#+name:
#+BEGIN_SRC rust
fn another_function(x: i32, y: i32) {
    println!("The value of x is:\t{}\nThe value of y is:\t{}", x, y);
}

fn main() {
    another_function(5, 6);
}
#+END_SRC

Function bodies are made up of a series of statements optionally ending in an expression.
Statements are instructions that perform some action and do not return a value.
Expressions evaluate to a resulting value.

something like `let y = 6;` is a statement. A function definition is also a statement, i.e. `fn main() {let y = 6;}` is a statement.

statements do not return values so you can't do something like this: 

#+name:
#+BEGIN_SRC rust
fn main() {
    let x = (let y = 6);
}
#+END_SRC

Expressions evaluate to something and make up most of the rest of the code that you'll be writing in Rust.

#+name:
#+BEGIN_SRC rust
fn main() {
    let _x = 5;
    let y = {
        let x = 3;
        x + 1
    };
    println!("The value of y is:\t{}", y);
}
#+END_SRC

** Functions with Return Values

   We don't name return values, but we do declare their type after an arrow (->).

#+name:
#+BEGIN_SRC rust
fn five() -> i32 {
    5
}

fn main() {
    let x = five();
    println!("The value of x is:\t{}", x);
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
fn plus_one(x: i32) -> i32 {
    x + 1
}

fn main() {
    let x = plus_one(5);
    println!("The value of x is: {}", x);
}
#+END_SRC

If we place a semi-colon at the end of the line containing x + 1, we change it from an expression to a statement, throwing an error:

#+name:
#+BEGIN_SRC rust
fn plus_one(x: i32) -> i32 {
    x + 1;
}

fn main() {
    let x = plus_one(5);
    println!("The value of x is: {}", x);
}
#+END_SRC

#+BEGIN_SRC
error[E0308]: mismatched types
 --> src/main.rs:2:24
  |
2 | fn plus_one(x: i32) -> i32 {
  |    --------            ^^^ expected `i32`, found `()`
  |    |
  |    implicitly returns `()` as its body has no tail or `return` expression
3 |     x + 1;
  |          - help: consider removing this semicolon

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: could not compile `cargo05szuD`.

To learn more, run the command again with --verbose.
#+END_SRC

* Control Flow
  
** If Expressions

#+name:
#+BEGIN_SRC rust
fn main() {
    let number = 7;

    if number < 5 {
        println!("Condition was true");
    } else {
        println!("Condition was false");
    }
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
fn main() {
    let number = 3;
    if number != 0 {
        println!("Number was something other than 0");
    }
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
fn main() {
    let number = 6;
    if number % 4 == 0 {
        println!("Number is divisible by 4");
    } else if number % 3 == 0 {
        println!("Number is divisible by 3");
    } else if number % 2 == 0 {
        println!("Number is divisible by 2");
    } else {
        println!("Number is not divisible by 4, 3, or 2.");
    }
}
#+END_SRC

#+name:
#+BEGIN_SRC rust
fn main() {
    let number = 6;
    match number {
        number if number % 4 == 0 => println!("Number divisible by 4"),
        number if number % 3 == 0 => println!("Number divisible by 3"),
        number if number % 2 == 0 => println!("Number divisible by 2"),
        _ => println!("Number is not divisible by 4, 3, or 2."),
    }
}
#+END_SRC

** Using if in a let statement

   Because if is an expression, we can use it on the right side of a let statement

#+name:
#+BEGIN_SRC rust
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 };
    println!("The value of the number is: {}", number);
}
#+END_SRC

Blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole if expression depends on which block of code executes.
This means the values have the potential to be results from each arm of the if must be the same type. If the types are mismatched, the compiler will throw an error. 

#+name:
#+BEGIN_SRC rust
fn main() {
    let condition = true;
    let number = if condition { 5 } else { "six" };
    println!("The value of the number is: {}", number);
}
#+END_SRC


#+BEGIN_SRC 
error[E0308]: `if` and `else` have incompatible types
 --> src/main.rs:4:44
  |
4 |     let number = if condition { 5 } else { "six" };
  |                                 -          ^^^^^ expected integer, found `&str`
  |                                 |
  |                                 expected because of this

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: could not compile `cargo3VkbtW`.

To learn more, run the command again with --verbose.
#+END_SRC

** Repetition with Loops

   Rust has 3 kinds of loops: loop, while, and for.

   loop is an infinite loop until a condition is met or an escape is sent from the keyboard.
   
#+name:
#+BEGIN_SRC rust
fn main() {
    loop {
        println!("Again!");
        break;
    }
}
#+END_SRC

** Returning values from loops

   One of the uses of a loop is to retry an operation we know might fail, such as checking whether a thread has completed its job.
   We might need to pass the result of an operation to the rest of the code. To do this we can add the value we want returned after the break expression.
   
#+name:
#+BEGIN_SRC rust
fn main() {
    let mut counter = 0;
    let result = loop {
        counter += 1;
        if counter == 10 {
            break counter * 2;
        }
    };
    println!("The result is {}", result);
}
#+END_SRC

** Conditional Loops with while

#+name:
#+BEGIN_SRC rust
fn main() {
    let mut number = 3;
    while number != 0 {
        println!("{}!", number);
        number -= 1;
    }
    println!("LIFTOFF!!!");
}
#+END_SRC
      
#+name:
#+BEGIN_SRC rust
// microloops
fn print_note(n: u32) {
    let mut counter = n;
    while counter != 0 {
        print!("𝅘𝅥𝅮");
        counter -= 1;
    }
}

fn small_loop(i: u32) {
    let mut counter = 0;
    let result = loop {
        counter += 1;
        print_note(counter);
        if counter == i {
            break counter;
        }
    };
    println!("{}", result);
}

fn main() {
    let mut number = 8;
    while number != 0 {
        small_loop(number);
        number -= 1;
    }
    println!("It's pretty much Meshuggah");
}
#+END_SRC

** Looping Through a Collection with for

   We could use a while loop to loop through a collection, like an array:
   
#+name:
#+BEGIN_SRC rust
fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut index = 0;

    while index < 5 {
        println!("The value is:\t{}", a[index]);
        index += 1;
    }
}
#+END_SRC

This approach is error prone because we could cause the program to panic if the index length is incorrect.
It's also slow because the compiler adds runtime code to perform the conditional check on every element on event iteration through the loop.

Instead we could use a for loop:

#+name:
#+BEGIN_SRC rust
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a.iter() {
        println!("The value is:\t{}", element);
    }
}
#+END_SRC

We get the same results, and the code is safer because the iterations are explicitly stated.

#+name:
#+BEGIN_SRC rust
fn main() {
    for number in (1..4).rev() {
        println!("{}!", number);
    }
    println!("LIFTOFF!!!");
}
#+END_SRC

* Summary

  Try building programs to do the following:

** Convert temperature between Fahrenheit and Celsius

#+name:
#+BEGIN_SRC rust
fn convert_temp(temp: f64) -> (f64, f64, f64, f64) {
    let celsius = (temp - 32.0) / 1.8;
    let fahrenheit = (temp * (9.0 / 5.0)) + 32.0;
    let c_kelvin = celsius * 274.15;
    let f_kelvin = fahrenheit * 255.9287;
    (celsius, fahrenheit, c_kelvin, f_kelvin)
}

fn main() {
    for number in (0..110).step_by(10) {
        let y = number as f64;
        println!(
            "Input:\t\t\t{}\nIf F, Celsius:\t\t{:.2}\nIf C, Fahrenheit:\t{:.2}\nIf C, Kelvin:\t\t{:.2}\nIf F, Kelvin:\t\t{:.2}\n",
            y,
            convert_temp(y).0,
            convert_temp(y).1,
            convert_temp(y).2,
	    convert_temp(y).3,
        );
    }
}
#+END_SRC
 
#+BEGIN_SRC
Input:			0
If F, Celsius:		-17.78
If C, Fahrenheit:	32.00
If C, Kelvin:		-4873.78
If F, Kelvin:		8189.72

Input:			10
If F, Celsius:		-12.22
If C, Fahrenheit:	50.00
If C, Kelvin:		-3350.72
If F, Kelvin:		12796.43

Input:			20
If F, Celsius:		-6.67
If C, Fahrenheit:	68.00
If C, Kelvin:		-1827.67
If F, Kelvin:		17403.15

Input:			30
If F, Celsius:		-1.11
If C, Fahrenheit:	86.00
If C, Kelvin:		-304.61
If F, Kelvin:		22009.87

Input:			40
If F, Celsius:		4.44
If C, Fahrenheit:	104.00
If C, Kelvin:		1218.44
If F, Kelvin:		26616.58

Input:			50
If F, Celsius:		10.00
If C, Fahrenheit:	122.00
If C, Kelvin:		2741.50
If F, Kelvin:		31223.30

Input:			60
If F, Celsius:		15.56
If C, Fahrenheit:	140.00
If C, Kelvin:		4264.56
If F, Kelvin:		35830.02

Input:			70
If F, Celsius:		21.11
If C, Fahrenheit:	158.00
If C, Kelvin:		5787.61
If F, Kelvin:		40436.73

Input:			80
If F, Celsius:		26.67
If C, Fahrenheit:	176.00
If C, Kelvin:		7310.67
If F, Kelvin:		45043.45

Input:			90
If F, Celsius:		32.22
If C, Fahrenheit:	194.00
If C, Kelvin:		8833.72
If F, Kelvin:		49650.17

Input:			100
If F, Celsius:		37.78
If C, Fahrenheit:	212.00
If C, Kelvin:		10356.78
If F, Kelvin:		54256.88
#+END_SRC
 
** Generate the nth Fibonacci number

#+name:
#+BEGIN_SRC rust
// fn fib(n: u32) -> u32 {
//     match n {
//         0 => 0,
//         1 => 1,
//         _ => fib(n - 1) + fib(n - 2),
//     }
// }

fn binet(n: u32) -> u64 {
    let first_term = (1.0 + (5.0 as f64).sqrt() / 2.0).powf(n as f64);
    let second_term = (1.0 - (5.0 as f64).sqrt() / 2.0).powf(n as f64);
    // let second = (1.0 + (5.0 as f64).sqrt() / 2.0);
    let result = (first_term - second_term) * (1.0 / (5.0 as f64).sqrt());
    // (n as f64).sqrt()
    result as u64
}

fn main() {
    for number in 1..100 {
        print!("{}, ", binet(number));
    }
}
#+END_SRC

1, 2, 4, 9, 19, 40, 85, 181, 383, 812, 1720, 3645, 7720, 16352, 34634, 73357, 155372, 329084, 697012, 1476296, 3126845, 6622765, 14027241, 29710174, 62927159, 133281861, 282295512, 597911491, 1266396860, 2682271594, 5681142404, 12032852707, 25485991015, 53980195207, 114331888169, 242158825139, 512900622322, 1086340950929, 2300907057438, 4873399352610, 10322025469580, 21862400777312, 46305307922020, 98076216038370, 207728759057245, 439976572124083, 931885334012477, 1973764811055976, 4180500955615072, 8854443113994140, 18754011466892048, 39721633712282632, 84131770291288288, 178193949010647232, 377420840594116544, 799390168440894848, 1693135547030318848, 3586118636170862080, 7595521159099303936, 16087571977241323520, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615, 

** Print the lyrics to the Christmas carol "The Twelve Days of Christmas", taking advantage of the repetition

#+name:
#+BEGIN_SRC rust
// get the lyrics for each day of xmas
fn day_of_xmas(n: u32) {
    match n {
        1 => println!("A partridge in a pear tree"),
        2 => println!("Two turtle doves, and"),
        3 => println!("Three french hens"),
        4 => println!("Four calling birds"),
        5 => println!("Five golden rings"),
        6 => println!("Six geese a-laying"),
        7 => println!("Seven swans a-swimming"),
        8 => println!("Eight maids a milking"),
        9 => println!("Nine ladies dancing"),
        10 => println!("Ten lords a leaping"),
        11 => println!("Eleven pipers piping"),
        12 => println!("Twelve drummers drumming"),
        _ => println!("Tooooo many daaaays"),
    }
}

// recursively sing each line
fn sing_it(n: u32) {
    if n == 1 {
        day_of_xmas(n);
    } else {
        day_of_xmas(n);
        sing_it(n - 1)
    }
}

// get the proper days, add a heading and print out the day's worth of song
fn nth_day(n: u32) {
    let result = match n {
        1 => "first",
        2 => "second",
        3 => "third",
        4 => "fourth",
        5 => "fifth",
        6 => "sixth",
        7 => "seventh",
        8 => "eighth",
        9 => "ninth",
        10 => "tenth",
        11 => "eleventh",
        12 => "twelfth",
        _ => "nope",
    };
    println!(
        "\n------------------------------------------------------\nOn the {} day of christmas, my true love gave to me\n------------------------------------------------------\n",
        result
    );
    sing_it(n);
}

// hit it
fn main() {
    for number in 1..13 {
        nth_day(number);
    }
}
#+END_SRC
 
#+BEGIN_SRC
------------------------------------------------------
On the first day of christmas, my true love gave to me
------------------------------------------------------

A partridge in a pear tree

------------------------------------------------------
On the second day of christmas, my true love gave to me
------------------------------------------------------

Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the third day of christmas, my true love gave to me
------------------------------------------------------

Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the fourth day of christmas, my true love gave to me
------------------------------------------------------

Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the fifth day of christmas, my true love gave to me
------------------------------------------------------

Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the sixth day of christmas, my true love gave to me
------------------------------------------------------

Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the seventh day of christmas, my true love gave to me
------------------------------------------------------

Seven swans a-swimming
Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the eighth day of christmas, my true love gave to me
------------------------------------------------------

Eight maids a milking
Seven swans a-swimming
Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the ninth day of christmas, my true love gave to me
------------------------------------------------------

Nine ladies dancing
Eight maids a milking
Seven swans a-swimming
Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the tenth day of christmas, my true love gave to me
------------------------------------------------------

Ten lords a leaping
Nine ladies dancing
Eight maids a milking
Seven swans a-swimming
Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the eleventh day of christmas, my true love gave to me
------------------------------------------------------

Eleven pipers piping
Ten lords a leaping
Nine ladies dancing
Eight maids a milking
Seven swans a-swimming
Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree

------------------------------------------------------
On the twelfth day of christmas, my true love gave to me
------------------------------------------------------

Twelve drummers drumming
Eleven pipers piping
Ten lords a leaping
Nine ladies dancing
Eight maids a milking
Seven swans a-swimming
Six geese a-laying
Five golden rings
Four calling birds
Three french hens
Two turtle doves, and
A partridge in a pear tree
#+END_SRC

