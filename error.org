* Error Handling

  In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you'll discover errors and handle them appropriately before you've deployed your code to production.

  Rust groups errors into two major categories: recoverable and unrecoverable errors.
  For a recoverable error, like a file not found error, its reasonable to report the problem to the user and retry the operation.
  Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.

  Rust doesn't have an exception mechanism. Instead, it has the type Result<T, E> for recoverable errors and the panic! macro that stops execution when the program encounters an unrecoverable error.

* Unrecoverable Errors with panic!

  When the panic! macro executes, your program will print a failure message, unwind, and clean up the stack, and then quit.

#+name:
#+BEGIN_SRC rust
fn main() {
    panic!("Crash and burn");
}
#+END_SRC  

: thread 'main' panicked at 'Crash and burn', src/main.rs:3:5

** Using a panic! Backtrace
  
   Let's look at another example to see what it's like when a panic! call comes from a library because of a bug in our code instead of from our code calling the macro directly.

#+name:
#+BEGIN_SRC rust
fn main() {
    let v = vec![1, 2, 3];
    v[99];
}
#+END_SRC

* Recoverable Errors with Result

  Most errors aren't serious enough to require the program to stop entirely. Sometimes, when a function fails, its for a reason that you can easily interpret and respond to.

  Recall that the Result enum is defined as having two variants, Ok and Err:

#+BEGIN_SRC rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+END_SRC

The T and E are generic type parameters.

#+name:
#+BEGIN_SRC rust
// call a fn that returns a Result value because the fn could fail
use std::fs::File;

fn main() {
    let f: u32 = File::open("hello.txt");
}
#+END_SRC

We need to add some code to make sure that the event of failure is handled well with the Result type

#+name:
#+BEGIN_SRC rust :tangle error_handler/src/main.rs
use std::fs::File;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => panic!("Problem opening the file: {:?}", error),
    };
    println!("{:?}", f);
}
#+END_SRC

: thread 'main' panicked at 'Problem opening the file: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:9:23

when a file was added named hello, this returned:

File { fd: 3, path: "/home/michael/Documents/exp/rust/error_handler/hello.txt", read: true, write: false }

** Matching on Different Errors

   The code above will panic! no matter why File::open failed. We want to take different actions for different failure reasons.
   If File::open failed because the file doesn't exist, we want to create the file and return the handle to the new file.
   If File::open failed for another reason, (for example, due to permissions) we still want it to panic!

#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("hello.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error)
            }
        },
    };
}
#+END_SRC

A more seasoned Rustacean might write this code instead:

#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt").unwrap_or_else(|error| {
        if error.kind() == ErrorKind::NotFound {
            File::create("hello.txt").unwrap_or_else(|error| {
                panic!("Problem creating the file: {:?}", error);
            })
        } else {
            panic!("Problem opening the file: {:?}", error);
        }
    });
}
#+END_SRC

** Shortcuts for Panic on Error: unwrap and expect

   Using match works well enough, but it can be a bit verbose and doesn't always communicate intent well. The Result<T, E> type has many helper methods defined on it to do various tasks.

   The method unwrap() is a shortcut that is implemented just like the match expression. If the Result is the Ok variant, unwrap wil return the value inside of Ok.
   If Err, it will call the panic! macro for us

#+name:
#+BEGIN_SRC rust
use std::fs::File;

fn main() {
    let f = File::open("hello.txt").unwrap();
}
#+END_SRC

: thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:5:37

