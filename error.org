* Error Handling

  In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you'll discover errors and handle them appropriately before you've deployed your code to production.

  Rust groups errors into two major categories: recoverable and unrecoverable errors.
  For a recoverable error, like a file not found error, its reasonable to report the problem to the user and retry the operation.
  Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.

  Rust doesn't have an exception mechanism. Instead, it has the type Result<T, E> for recoverable errors and the panic! macro that stops execution when the program encounters an unrecoverable error.

* Unrecoverable Errors with panic!

  When the panic! macro executes, your program will print a failure message, unwind, and clean up the stack, and then quit.

#+name:
#+BEGIN_SRC rust
fn main() {
    panic!("Crash and burn");
}
#+END_SRC  

: thread 'main' panicked at 'Crash and burn', src/main.rs:3:5

** Using a panic! Backtrace
  
   Let's look at another example to see what it's like when a panic! call comes from a library because of a bug in our code instead of from our code calling the macro directly.

#+name:
#+BEGIN_SRC rust
fn main() {
    let v = vec![1, 2, 3];
    v[99];
}
#+END_SRC

* Recoverable Errors with Result

  Most errors aren't serious enough to require the program to stop entirely. Sometimes, when a function fails, its for a reason that you can easily interpret and respond to.

  Recall that the Result enum is defined as having two variants, Ok and Err:

#+BEGIN_SRC rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+END_SRC

The T and E are generic type parameters.

#+name:
#+BEGIN_SRC rust
// call a fn that returns a Result value because the fn could fail
use std::fs::File;

fn main() {
    let f: u32 = File::open("hello.txt");
}
#+END_SRC

We need to add some code to make sure that the event of failure is handled well with the Result type

#+name:
#+BEGIN_SRC rust :tangle error_handler/src/main.rs
use std::fs::File;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => panic!("Problem opening the file: {:?}", error),
    };
    println!("{:?}", f);
}
#+END_SRC

: thread 'main' panicked at 'Problem opening the file: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:9:23

when a file was added named hello, this returned:

File { fd: 3, path: "/home/michael/Documents/exp/rust/error_handler/hello.txt", read: true, write: false }

** Matching on Different Errors

   The code above will panic! no matter why File::open failed. We want to take different actions for different failure reasons.
   If File::open failed because the file doesn't exist, we want to create the file and return the handle to the new file.
   If File::open failed for another reason, (for example, due to permissions) we still want it to panic!

#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("hello.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error)
            }
        },
    };
}
#+END_SRC

A more seasoned Rustacean might write this code instead:

#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt").unwrap_or_else(|error| {
        if error.kind() == ErrorKind::NotFound {
            File::create("hello.txt").unwrap_or_else(|error| {
                panic!("Problem creating the file: {:?}", error);
            })
        } else {
            panic!("Problem opening the file: {:?}", error);
        }
    });
}
#+END_SRC

** Shortcuts for Panic on Error: unwrap and expect

   Using match works well enough, but it can be a bit verbose and doesn't always communicate intent well. The Result<T, E> type has many helper methods defined on it to do various tasks.

   The method unwrap() is a shortcut that is implemented just like the match expression. If the Result is the Ok variant, unwrap wil return the value inside of Ok.
   If Err, it will call the panic! macro for us

#+name:
#+BEGIN_SRC rust
use std::fs::File;

fn main() {
    let f = File::open("hello.txt").unwrap();
}
#+END_SRC

: thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:5:

Another method, expect, is similar to unwrap except that it lets you choose the panic! error message

#+name:
#+BEGIN_SRC rust
use std::fs::File;

fn main() {
    let f = File::open("hello.txt").expect("Failed to open hello.txt");
}
#+END_SRC

: thread 'main' panicked at 'Failed to open hello.txt: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:5:37

** Propagating Errors

   When you're writing a function whose implementation calls something that might fail, instead of handling the error within this function, you can return the error to the calling code so that it can decide what to do. This is known as propagating the error and gives more control to the calling code, where there may be more information or logic that dictates how the error shoujld be handled than what you have available in the context of your code.

   The code below reads a username from a file. If the file doesn't exist or can't be read, this function will return those errors to the code that called this function.
   
#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io;
use std::io::Read;

// Return either the String for username, or an io error
fn read_username_from_file() -> Result<String, io::Error> {
    let f = File::open("hello.txt");
    // if file succeeds in being read, return it else return io error
    let mut f = match f {
	Ok(file) => file,
	Err(e) => return Err(e),
    };
    
    // instantiate a string to hold the username
    let mut s = String::new();

    // read the file to string else return an io error
    match f.read_to_string(&mut s) {
	Ok(_) => Ok(s),
	Err(e) => Err(e),
    }
}
#+END_SRC

The pattern of propagating errors is so common in Rust that Rust provides the question mark operator ? to make this easier.

** A Shortcut for Propagating Errors: the ? Operator

#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let mut f = File::open("hello.txt")?;
    let mut s = String::new();
    f.read_to_string(&mut s)?;
    Ok(s)
}
#+END_SRC

In the function above, if the return value of an operation is an Ok, it is returned to the scope it was called in. If it is an Err, the Err will be returned from the whole function as if we had used the return keyword.

The ? operator eliminates a lot of the boilerplate and makes this function's implementation simpler. We could even shorten the code:

#+name:
#+BEGIN_SRC rust
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let mut s = String::new();
    File::open("hello.txt")?.read_to_string(&mut s)?;
    Ok(s)
}
#+END_SRC

Even shorter:

#+name:
#+BEGIN_SRC rust
use std::fs;
use std::io;

fn read_username_from_file() -> Result<String, io::Error> {
    fs::read_to_string("hello.txt")
}
#+END_SRC

This is such a common pattern it is part of Rust's std lib.

** The ? Operator can be used in functions that return Result

   The ? operator can be used in fns that have a return type of Result, because it is defined to work in the same way as the match expression.

   If we try to use it in a function with a different return type, we get an error that points out only the Result or Option type or another type that implements std::ops::Try.

   If your fn doesn't have this return type, but you want to use the ? operator, there are two options:
   The first, and most obvious, is to change the return type to Result.
   The second is to use a match or one of the Result<T, E> methods to handle the Result<T, E> in whatever way is appropriate.

   The main fn is special, and there are restrictions on what its return type must be.
   One valid return type for main is (), and another is Result<T, E>

#+name:
#+BEGIN_SRC rust
use std::error::Error;
use std::fs::File;

fn main() -> Result<(), Box<dyn Error>> {
    let f = File::open("hello.txt");
    Ok(())
}
#+END_SRC

The Box<dyn Error> is called a trait object -- for now we can read it to mean "any kind of error". 

* To panic! or Not to panic!

  When the code panics, there is no way to recover. When you choose to return a Result value, you give the calling code options rather than making the decision for it. Returning Result is a good default choice when you're defining a function that might fail.

** Examples, Prototype Code, and Tests

   When we're writing an example to illustrate a concept, its worthwhile to rely on methods like unwrap and expect which could return panic!. When you want to return to make the program more robust, you can go back and replace these calls.

   If a method call fails in a test, we'd want the whole test to fail, even if that method isn't the functionality under test. Because panic! is how a test is marked as failure, calling unwrap or expect is exactly what should happen.

** Cases in which you have more information than the compiler

   It would also be appropriate to call unwrap when you have some other logic that ensures the Result will have an Ok value, but the logic isn't something that the compiler understands.

   If you can ensure by manually inspecting the code that you'll never have an Err variant, it's acceptable to call unwrap.

#+name:
#+BEGIN_SRC rust
fn main() {
    use std::net::IpAddr;

    let home: IpAddr = "127.0.0.1".parse().unwrap();
}
#+END_SRC

** Guidelines for Error Handling

   It's advisable to have your code panic when it's possible that your code could end up in a bad state.
   In this context, a bad state is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid, contradictory, or missing values are passed to your code -- plus one or more of the following:

   - the bad state is not something that's expected to happen occasionally, i.e. you haven't set up defensive code to deal with it
   - Your code at this point needs to rely on not being in this bad state
   - There's not a good way to encode this information in the types we use

   When failure is expected, it's more appropriate to return a Result than to make a panic! call. When your code performs operations on values, your code should verify the values are valid first and panic if the values aren't valid.

   Having lots of checks in our functions would be needlessly verbose, so we can instead rely on Rust's type system to do many of the checks for us.

   
** Creating Custom Types for Validation

   In our secret number game, we only validated that the number guessed was positive (with the u32 type).
   It would be a useful enhancement to guide the user towards valid guesses and have different behavior when a user guesses a number in or out of range.
   
#+name:
#+BEGIN_SRC rust
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng().gen_range(1, 101);

    loop {
	// --snip--
	println!("Input a guess");

	let mut guess = String::new();

	io::stdin()
	    .read_line(&mut guess)
	    .expect("Failed to read line");

	// this is the important part here
	// wrap guess in an option and handle the Err
	let guess: i32 = match guess.trim().parse() {
	    Ok(num) => num,
	    Err(_) => continue,
	};
	// checks if guess in range, if not, tell the user and the start the next iteration of the loop and ask for another guess. 
	if guess < 1 || guess > 100 {
	    println!("The secret number will be between 1 and 100");
	    continue;
	}

	match guess.cmp(&secret_number) {
	    Ordering::Less => println!("Too small!"),
	    Ordering::Greater => println!("Too big!"),
	    Ordering::Equal => {
		println!("You win!");
		break;
	    }
	}
    }
}
#+END_SRC

This is not ideal, as if we had to replicate this constriction we would have to write a lot of code for that functionality.

Instead we can make a new type and put the validations in a function to create an instance of the type rather than repeating the validations everywhere.
That way, its safe for fns to use the new type in their signatures and confidently use the values they receive.

We could define a Guess type like so that will only create an instance of Guess if the new function recieves a value between 1 and 100.

#+name:
#+BEGIN_SRC rust :tangle n_guess/src/main.rs
use rand::Rng;
use std::cmp::Ordering;
use std::io;

#[derive(PartialEq, Eq, PartialOrd, Ord)]
pub struct Guess { 
    value: i32,
}

impl Guess {
    pub fn new(value: i32) -> Guess {
	if value < 1 || value > 100 {
	    panic!("Guess value must be between 1 and 100, got {}.", value);
	}

	Guess { value }
    }

    pub fn value(&self) -> i32 {
	self.value
    }
}

fn main() {
    println!("Guess the number!");

    let secret_number = Guess::new(rand::thread_rng().gen_range(1, 101));

    loop {
	println!("Input a guess");

	// pull in guess as a String
	let mut guess = String::new();

	// parse it into a u32
	io::stdin()
	    .read_line(&mut guess)
	    .expect("Failed to read line");

	// create a new Guess type to hold the u32 and constrict it to [1, 100]
	let guess_str = Guess::new(guess.trim().parse().unwrap());

	// compare
	match guess_str.cmp(&secret_number) {
	    Ordering::Less => println!("Too small!"),
	    Ordering::Greater => println!("Too big!"),
	    Ordering::Equal => {
		println!("You win!");
		break;
	    }
	}
    }
}
#+END_SRC

